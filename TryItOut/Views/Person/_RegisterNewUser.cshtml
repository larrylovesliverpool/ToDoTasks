
@model TryItOut.ViewModels.RegisteredUserViewModel

<!-- form -->
@using (Html.BeginForm("Register", "Person", FormMethod.Post))
{
    <div class="form-horizontal">
        <div class="row">
            <div class="col-lg-12">
                <div class="form-group required">
                    @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-lg-3" })
                    <div class="col-lg-9">
                        @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group required">
                    @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-lg-3" })
                    <div class="col-lg-9">
                        @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control datecontrol" } })
                        @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-offset-1 col-sm-11">
            @Html.ValidationSummary(false)
        </div>
    </div>

    <!-- Default post back btn -->
    <input type="submit" value="Save" class="btn" name="btn" />
    <!-- Cancel uses formaction for different actionresult in controller and no validation -->
    <input type="submit" value="Cancel" class="btn" name="btn" formaction="@(Url.Action("Index","Home"))" formnovalidate="formnovalidate" />
}

<!-- form -->
